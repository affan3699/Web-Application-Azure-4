# Maven
# This pipeline is designed to build a Java project using Apache Maven, run tests, and publish the build artifact.
# For more information: https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
  - main
# The pipeline will automatically trigger when changes are pushed to the 'main' branch.

pool: Default
# Specifies the agent pool where the pipeline will run.
# 'Default' uses the default agent pool in Azure DevOps.

steps:
  # Step 1: Use Maven to build the application
  - task: Maven@3
    # Executes a Maven task using Azure DevOps' Maven task.
    inputs:
      mavenPomFile: 'pom.xml'
      # Specifies the location of the Maven POM file to use for the build.
      mavenOptions: '-Xmx3072m'
      # Allocates a maximum heap size of 3 GB to the Maven process to ensure sufficient memory for builds.
      javaHomeOption: 'JDKVersion'
      # Indicates that the Java version will be specified using the 'JDKVersionOption' below.
      jdkVersionOption: '1.17'
      # Specifies the version of Java to use for the build (Java 17 in this case).
      jdkArchitectureOption: 'x64'
      # Sets the architecture for the JDK (64-bit in this case).
      publishJUnitResults: true
      # Ensures that the results of JUnit tests are published in the pipeline results.
      testResultsFiles: '**/surefire-reports/TEST-*.xml'
      # Specifies the location of the JUnit test results files to publish.
      goals: 'package'
      # Runs the Maven 'package' goal to compile, test, and package the application (e.g., as a JAR file).

  # Step 2: Publish the built JAR file as an artifact
  - task: PublishBuildArtifacts@1
    # Publishes the generated files (artifacts) to Azure DevOps.
    inputs:
      PathtoPublish: '$(System.DefaultWorkingDirectory)/target'
      # Specifies the path to the build output directory containing the packaged JAR file.
      ArtifactName: 'drop'
      # Names the artifact as 'drop' for later retrieval in the pipeline or deployment stages.
      publishLocation: 'Container'
      # Publishes the artifact to Azure DevOps' artifact container, making it accessible for further pipeline stages or downloads.
